
allprojects {

	version = '2.0.0-SNAPSHOT'
	group = 'gov.pnnl.proven.cluster'

	task gradleVersion { doLast {  println "Gradle version $gradle.gradleVersion" } }

	task provenVersion {
		doLast {
			println "$version"
			println "$name"
		}
	}
}

buildscript {
	repositories { jcenter() }
	dependencies { classpath 'com.github.jengelman.gradle.plugins:shadow:5.1.0' }
}

subprojects {

	ext.javaEEVersion = "8.0"
	//ext.jetVersion = "3.0"
	ext.jetVersion = "3.2.2"
	//ext.jetHazelcastVersion = "3.12"
	ext.jetHazelcastVersion = "3.12.6"
	//ext.payaraVersion = "5.192"
	ext.payaraVersion = "5.201"
	//ext.payaraHazelcastVersion = "3.12"
	ext.payaraHazelcastVersion = "3.12.6"
	ext.payaraJerseyVersion = "2.28"
	ext.influxDbLibVersion = "2.8"
	ext.swaggerVersion = "2.0.8"
	ext.jaxbApiVersion = "2.3.1"
	ext.eclipseMoxyVersion = "2.7.4"
	ext.moduleProjectSuffix = "-module"
	ext.jsonbApiVersion = "1.0"
	ext.jsonbYassonApiVersion = "1.0.4"
	ext.isModuleProject = (project.name.endsWith("${moduleProjectSuffix}"))
	ext.isMemberProject = (project.name == 'proven-member')

	apply plugin: 'com.github.johnrengelman.shadow'
	apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'maven-publish'

	task javadocJar(type: Jar) {
		from javadoc
		classifier 'javadoc'
	}

	task sourcesJar(type: Jar) {
		from sourceSets.main.allJava
		classifier 'sources'
	}

	shadowJar { mergeServiceFiles() }

	if (isModuleProject) {

		apply plugin: 'war'
		apply plugin: 'eclipse-wtp'

		jar.enabled = false

		publishing {
			publications {
				mavenWeb(MavenPublication) { from components.web }
			}
		}

		eclipse {
			classpath { downloadSources=true }
			wtp {
				facet {
					facet name: 'jst.web', version: '3.1'
					facet name: 'jst.java', version: '1.8'
				}
			}
		}

		war {
			archiveName = project.name - '-module' + "-$version" + '.war'
			webXml = null
		}

		configurations {
			war {}
			shadow {}
		}

		artifacts {
			war tasks.war
			shadow tasks.shadowJar
		}
	}

	// non-module projects
	else {

		publishing {
			publications {
				mavenJava(MavenPublication) {
					groupId group
					artifactId artifactId
					from components.java
				}
			}
		}

	}

	sourceCompatibility = 1.8

	repositories {
		mavenCentral()
		mavenLocal()
		maven { url 'https://jitpack.io' }
		jcenter()
	}

	dependencies {

		// All subprojects
		testCompile 'junit:junit:4.8.2'
		compileOnly group: 'javax', name: 'javaee-web-api', version: "${javaEEVersion}"
		compileOnly group: 'javax', name: 'javaee-api', version: "${javaEEVersion}"
		compileOnly group: 'fish.payara.api', name: 'payara-api', version: "${payaraVersion}"
		compileOnly group: 'com.hazelcast', name: 'hazelcast', version: "${payaraHazelcastVersion}"
		compileOnly group: 'fish.payara.extras', name: 'payara-micro', version: "${payaraVersion}"
		compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
		compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.11.1'
		compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.1'
		compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.1'
		compile group: 'commons-validator', name: 'commons-validator', version: '1.6'
		compile group: 'org.apache.commons', name: 'commons-configuration2', version: '2.6'
  //      compile group: 'org.apache.commons', name: 'commons-csv', version: '1.5'
  //      compile group: 'com.opencsv', name: 'opencsv', version :'5.2'
        compile group: 'au.com.bytecode', name: 'opencsv', version: '2.4'
        


		if (!isMemberProject) {
			compile project(':proven-member')
		}

		// Module subprojects
		if (isModuleProject) {
			compile (group: 'io.swagger.core.v3', name: 'swagger-jaxrs2', version: "${swaggerVersion}")
			compile (group: 'io.swagger.core.v3', name: 'swagger-jaxrs2-servlet-initializer', version: "${swaggerVersion}")
		}
	}
}

//
// Project Dependencies
//
project('proven-member') {
	// 	No dependencies
}

project('proven-member:disclosure-lib') {
	// No dependencies
}

project('proven-member:stream-lib') {
	// No dependencies
}

project('proven-member:module-lib') {
	dependencies {
		compile project(':proven-member:disclosure-lib')
		compile project(':proven-member:stream-lib')
		compile project(':proven-member:pipeline-lib')
	}
}

project('proven-member:hybrid-lib') {
	dependencies {  compile project(':proven-member:disclosure-lib') }
}

project('proven-member:pipeline-lib') {
	dependencies {  compile project(':proven-member:disclosure-lib') }
}

project('proven-member:disclosure-module') {
	dependencies {  compile project(':proven-member:module-lib')	 }
}

project('proven-member:stream-module') {
	dependencies {  compile project(':proven-member:module-lib')  }
}

project('proven-member:hybrid-module') {
	dependencies {
		compile project(':proven-member:hybrid-lib')
		compile project(':proven-member:pipeline-lib')
		compile project(':proven-member:module-lib')
	}
}

project('proven-member:member-module') {
	dependencies { compile project(':proven-member:module-lib') }
}

project('proven-client') {
	dependencies { compile project(':proven-member:disclosure-lib') }
}
